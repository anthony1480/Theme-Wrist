{% doc %}
  @prompt
    i need a product recommendation section to be placed in my add to cart drawer so when each person adds a product to cart they get other recommendations as well
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-cart-recommendations-{{ ai_gen_id }} {
    padding: {{ block.settings.section_padding }}px 0;
    background-color: {{ block.settings.background_color }};
  }

  .ai-cart-recommendations__header-{{ ai_gen_id }} {
    margin-bottom: {{ block.settings.spacing }}px;
  }

  .ai-cart-recommendations__title-{{ ai_gen_id }} {
    font-size: {{ block.settings.heading_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
    text-align: {{ block.settings.text_alignment }};
  }

  .ai-cart-recommendations__grid-{{ ai_gen_id }} {
    display: grid;
    grid-template-columns: repeat({{ block.settings.products_per_row }}, 1fr);
    gap: {{ block.settings.spacing }}px;
  }

  .ai-cart-recommendations__product-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 8px;
    text-decoration: none;
    color: inherit;
  }

  .ai-cart-recommendations__image-wrapper-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    padding-bottom: 100%;
    overflow: hidden;
    border-radius: {{ block.settings.image_border_radius }}px;
    background-color: #f5f5f5;
  }

  .ai-cart-recommendations__image-{{ ai_gen_id }} {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .ai-cart-recommendations__product-{{ ai_gen_id }}:hover .ai-cart-recommendations__image-{{ ai_gen_id }} {
    transform: scale(1.05);
  }

  .ai-cart-recommendations__product-info-{{ ai_gen_id }} {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }

  .ai-cart-recommendations__product-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.product_title_size }}px;
    color: {{ block.settings.text_color }};
    margin: 0;
    line-height: 1.3;
  }

  .ai-cart-recommendations__product-price-{{ ai_gen_id }} {
    font-size: {{ block.settings.price_size }}px;
    color: {{ block.settings.price_color }};
    font-weight: 500;
  }

  .ai-cart-recommendations__add-button-{{ ai_gen_id }} {
    width: 100%;
    padding: 10px 16px;
    background-color: {{ block.settings.button_background }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: {{ block.settings.button_text_size }}px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 4px;
  }

  .ai-cart-recommendations__add-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_background }};
  }

  .ai-cart-recommendations__add-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-cart-recommendations__empty-{{ ai_gen_id }} {
    text-align: center;
    padding: 40px 20px;
    color: {{ block.settings.text_color }};
    opacity: 0.6;
  }

  @media screen and (max-width: 749px) {
    .ai-cart-recommendations__grid-{{ ai_gen_id }} {
      grid-template-columns: repeat({{ block.settings.products_per_row_mobile }}, 1fr);
    }
  }
{% endstyle %}

<cart-recommendations-{{ ai_gen_id }}
  class="ai-cart-recommendations-{{ ai_gen_id }}"
  data-url="{{ routes.product_recommendations_url }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.heading != blank %}
    <div class="ai-cart-recommendations__header-{{ ai_gen_id }}">
      <h3 class="ai-cart-recommendations__title-{{ ai_gen_id }}">{{ block.settings.heading }}</h3>
    </div>
  {% endif %}

  <div class="ai-cart-recommendations__grid-{{ ai_gen_id }}" data-recommendations-container></div>

  <div class="ai-cart-recommendations__empty-{{ ai_gen_id }}" data-empty-state style="display: none;">
    {{ block.settings.empty_message }}
  </div>
</cart-recommendations-{{ ai_gen_id }}>

<script>
  (function() {
    class CartRecommendations{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.recommendationsUrl = this.dataset.url;
        this.container = this.querySelector('[data-recommendations-container]');
        this.emptyState = this.querySelector('[data-empty-state]');
        this.maxProducts = {{ block.settings.max_products }};
      }

      connectedCallback() {
        this.fetchRecommendations();
        document.addEventListener('cart:updated', () => this.fetchRecommendations());
      }

      async fetchRecommendations() {
        try {
          const cartResponse = await fetch('/cart.js');
          const cart = await cartResponse.json();

          if (!cart.items || cart.items.length === 0) {
            this.showEmptyState();
            return;
          }

          const firstProductId = cart.items[0].product_id;
          const response = await fetch(`${this.recommendationsUrl}?product_id=${firstProductId}&limit=${this.maxProducts}&section_id=cart-recommendations`);
          
          if (!response.ok) {
            this.showEmptyState();
            return;
          }

          const data = await response.json();
          
          if (data.products && data.products.length > 0) {
            this.renderRecommendations(data.products, cart.items);
          } else {
            this.showEmptyState();
          }
        } catch (error) {
          console.error('Error fetching recommendations:', error);
          this.showEmptyState();
        }
      }

      renderRecommendations(products, cartItems) {
        const cartProductIds = cartItems.map(item => item.product_id);
        const filteredProducts = products.filter(product => !cartProductIds.includes(product.id));

        if (filteredProducts.length === 0) {
          this.showEmptyState();
          return;
        }

        this.container.innerHTML = filteredProducts.map(product => this.createProductCard(product)).join('');
        this.emptyState.style.display = 'none';
        this.attachEventListeners();
      }

      createProductCard(product) {
        const variant = product.variants[0];
        const price = this.formatMoney(variant.price);
        const imageUrl = product.featured_image ? product.featured_image : '';

        return `
          <div class="ai-cart-recommendations__product-{{ ai_gen_id }}">
            <a href="${product.url}" class="ai-cart-recommendations__image-wrapper-{{ ai_gen_id }}">
              ${imageUrl ? `<img src="${imageUrl}" alt="${product.title}" class="ai-cart-recommendations__image-{{ ai_gen_id }}" loading="lazy">` : ''}
            </a>
            <div class="ai-cart-recommendations__product-info-{{ ai_gen_id }}">
              <a href="${product.url}">
                <h4 class="ai-cart-recommendations__product-title-{{ ai_gen_id }}">${product.title}</h4>
              </a>
              <div class="ai-cart-recommendations__product-price-{{ ai_gen_id }}">${price}</div>
            </div>
            <button 
              class="ai-cart-recommendations__add-button-{{ ai_gen_id }}" 
              data-variant-id="${variant.id}"
              ${!variant.available ? 'disabled' : ''}
            >
              ${variant.available ? '{{ block.settings.button_text }}' : '{{ block.settings.sold_out_text }}'}
            </button>
          </div>
        `;
      }

      attachEventListeners() {
        const buttons = this.container.querySelectorAll('.ai-cart-recommendations__add-button-{{ ai_gen_id }}');
        buttons.forEach(button => {
          button.addEventListener('click', (e) => this.addToCart(e));
        });
      }

      async addToCart(event) {
        const button = event.target;
        const variantId = button.dataset.variantId;
        const originalText = button.textContent;

        button.disabled = true;
        button.textContent = '{{ block.settings.adding_text }}';

        try {
          const response = await fetch('/cart/add.js', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              id: variantId,
              quantity: 1
            })
          });

          if (response.ok) {
            document.dispatchEvent(new CustomEvent('cart:updated'));
            button.textContent = '{{ block.settings.added_text }}';
            
            setTimeout(() => {
              button.textContent = originalText;
              button.disabled = false;
            }, 2000);
          } else {
            throw new Error('Failed to add to cart');
          }
        } catch (error) {
          console.error('Error adding to cart:', error);
          button.textContent = originalText;
          button.disabled = false;
        }
      }

      showEmptyState() {
        this.container.innerHTML = '';
        this.emptyState.style.display = 'block';
      }

      formatMoney(cents) {
        const amount = cents / 100;
        return new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: '{{ cart.currency.iso_code }}'
        }).format(amount);
      }
    }

    customElements.define('cart-recommendations-{{ ai_gen_id }}', CartRecommendations{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Cart recommendations",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "You may also like"
    },
    {
      "type": "text",
      "id": "empty_message",
      "label": "Empty message",
      "default": "No recommendations available"
    },
    {
      "type": "range",
      "id": "max_products",
      "min": 2,
      "max": 10,
      "step": 1,
      "label": "Maximum products",
      "default": 4
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "products_per_row",
      "label": "Products per row",
      "options": [
        { "value": "2", "label": "2" },
        { "value": "3", "label": "3" },
        { "value": "4", "label": "4" }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "products_per_row_mobile",
      "label": "Products per row on mobile",
      "options": [
        { "value": "1", "label": "1" },
        { "value": "2", "label": "2" }
      ],
      "default": "2"
    },
    {
      "type": "select",
      "id": "text_alignment",
      "label": "Text alignment",
      "options": [
        { "value": "left", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right" }
      ],
      "default": "left"
    },
    {
      "type": "range",
      "id": "spacing",
      "min": 8,
      "max": 40,
      "step": 4,
      "unit": "px",
      "label": "Spacing",
      "default": 16
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 0,
      "max": 60,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 20
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 12,
      "max": 32,
      "step": 2,
      "unit": "px",
      "label": "Heading size",
      "default": 18
    },
    {
      "type": "range",
      "id": "product_title_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Product title size",
      "default": 14
    },
    {
      "type": "range",
      "id": "price_size",
      "min": 10,
      "max": 20,
      "step": 1,
      "unit": "px",
      "label": "Price size",
      "default": 14
    },
    {
      "type": "header",
      "content": "Button"
    },
    {
      "type": "text",
      "id": "button_text",
      "label": "Button text",
      "default": "Add to cart"
    },
    {
      "type": "text",
      "id": "adding_text",
      "label": "Adding text",
      "default": "Adding..."
    },
    {
      "type": "text",
      "id": "added_text",
      "label": "Added text",
      "default": "Added!"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Sold out text",
      "default": "Sold out"
    },
    {
      "type": "range",
      "id": "button_text_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Button text size",
      "default": 14
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 4
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "image_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Image border radius",
      "default": 8
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "price_color",
      "label": "Price",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_background",
      "label": "Button background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_background",
      "label": "Button hover background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text",
      "default": "#ffffff"
    }
  ],
  "presets": [
    {
      "name": "Cart recommendations"
    }
  ]
}
{% endschema %}
